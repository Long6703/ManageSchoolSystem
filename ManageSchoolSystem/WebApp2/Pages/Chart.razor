@page "/chart"
@using AntDesign.Charts
@using Title = AntDesign.Charts.Title
@using gPRCContracts;
@using Share.Model;
@inject IUserService UserService

<Pie @ref="chart" Data="result" Config="config4" />


@code {
    IChartComponent chart;
    List<StudentCount> result = new List<StudentCount>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GetStudentCountsByClassReponse getStudentCountsByClassReponse =
                await UserService.GetStudentCountsByClass(new GetStudentCountsByClassRequest { Message = 1 });
            result = getStudentCountsByClassReponse.studentCountlist;
            chart.ChangeData(result);
            // foreach (var item in result)
            // {
            //     chartData.Add((item.ClassName, item.Count));
            // }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }


    readonly PieConfig config4 = new PieConfig
        {
            ForceFit = true,
            Title = new Title
            {
                Visible = true,
                Text = "Pie Chart-Graphic Tab Spider Layout"
            },
            Description = new Description
            {
                Visible = true,
                Text = "When the type of the pie chart label is set to spider, the labels are divided into two groups, and they are displayed in alignment by pulling lines on both sides of the chart. Generally speaking, the labels of the spider layout are less likely to block each other."
            },
            Radius = 0.8,
            AngleField = "count",
            ColorField = "className",
            Label = new PieLabelConfig
            {
                Visible = true,
                Type = "spider"
            }
        };


}